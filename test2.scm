(import (scheme base)
        (scheme write)
        (miruKanren))

;; larceny -r7rs -path . -program test-miruKanren.scm

(define (appendo l s out)
  (conde
    ((== '() l) (== s out))
    ((fresh (a d res)
       (== `(,a . ,d) l)
       (== `(,a . ,res) out)
       (appendo d s res)))))

(display (run* (lambda (q)
                 (fresh (x y)
                   (watch x (lambda (k)
                              (display 'hello-world)
                              (fresh ()
                                (== #t #t))))
                   (== x 'hi)
                   ))))
(newline)
(newline)


(display (run* (lambda (q)
                 (fresh (x y)
                   (watch x (lambda (k)
                              (display 'hello-world-x)
                              (fresh ()
                                (== #t #t))))
                   (watch y (lambda (k)
                              (display 'hello-world-y)
                              (fresh ()
                                (== #t #t))))
                   (== x 'hi)
                   (== y 'there)
                   ))))
(newline)
(newline)

(display (run* (lambda (q)
                 (fresh (x y z)
                   (watch x (lambda (k)
                              (display (list k 'hello-world-x))
                              (fresh ()
                                (== #t #t))))
                   (watch z (lambda (k)
                              (display (list k 'hello-world-z))
                              (fresh ()
                                (== #t #t))))
                   (watch y (lambda (k)
                              (display (list k 'hello-world-y))
                              (fresh ()
                                (== #t #t))))
                   (== z (list x y))
                   (== x 'hi)
                   (== y 'there)
                   ))))
(newline)
(newline)


(display (run* (lambda (q)
                 (fresh (n)
                   (peanoo n q)
                   (== n 3)))))
(newline)
(newline)

(display (run* (lambda (n)
                 (fresh (q)
                   (peanoo n q)
                   (== q '(s (s z)))))))
(newline)
(newline)

(display (run* (lambda (q)
                 (fresh (n-num n-pea
                               m-num m-pea
                               o-num o-pea)
                   (peanoo n-num n-pea)
                   (peanoo m-num m-pea)
                   (peanoo o-num o-pea)
                   (== q (list n-num m-num o-num
                               n-pea m-pea o-pea))
                   (== m-pea `(s (s ,n-pea)))
                   (== o-num m-num)
                   (== n-num 2)
                   ))))
(newline)
(newline)
